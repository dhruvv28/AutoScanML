import React, { useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import logo from './swajyot.jpeg';
import {
  PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer, LineChart, Line
} from 'recharts';

const stats = {
  total: 22908,
  daily: 131,
  yoy: 15,
  critical: 1880,
  high: 6830,
  medium: 11159,
  low: 622,
  unrated: 2411,
};

const severityByMonth = [
  { month: 'Jan', Critical: 120, High: 540, Medium: 900, Low: 50 },
  { month: 'Feb', Critical: 140, High: 600, Medium: 950, Low: 60 },
  { month: 'Mar', Critical: 160, High: 620, Medium: 1000, Low: 55 },
  { month: 'Apr', Critical: 170, High: 650, Medium: 1100, Low: 70 },
  { month: 'May', Critical: 200, High: 700, Medium: 1200, Low: 80 },
  { month: 'Jun', Critical: 180, High: 690, Medium: 1150, Low: 75 },
];

const severityByYear = [
  { year: 2016, Critical: 400, High: 1200, Medium: 2000, Low: 100 },
  { year: 2017, Critical: 900, High: 1400, Medium: 2200, Low: 120 },
  { year: 2018, Critical: 1000, High: 1500, Medium: 2500, Low: 130 },
  { year: 2019, Critical: 1100, High: 1600, Medium: 2700, Low: 140 },
  { year: 2020, Critical: 1200, High: 1700, Medium: 3000, Low: 150 },
  { year: 2021, Critical: 1300, High: 1800, Medium: 3200, Low: 160 },
  { year: 2022, Critical: 1500, High: 2000, Medium: 3500, Low: 180 },
  { year: 2023, Critical: 1700, High: 2200, Medium: 4000, Low: 200 },
  { year: 2024, Critical: 1800, High: 2500, Medium: 5000, Low: 300 },
  { year: 2025, Critical: 1880, High: 6830, Medium: 11159, Low: 622 },
];

const vendorImpact = [
  { vendor: 'WordPress', Impact: 4938 },
  { vendor: 'Linux', Impact: 947 },
  { vendor: 'Microsoft', Impact: 580 },
  { vendor: 'Adobe', Impact: 453 },
  { vendor: 'PHPGurukul', Impact: 409 },
  { vendor: 'IBM', Impact: 353 },
  { vendor: 'Apple', Impact: 345 },
  { vendor: 'ToToLink', Impact: 213 },
  { vendor: 'sourcecodester', Impact: 176 },
  { vendor: 'Tenda', Impact: 172 },
];

const COLORS = ['#ef4444', '#f97316', '#facc15', '#60a5fa', '#64748b'];

const trending = [
  { cve: 'CVE-2025-29927', title: 'Authorization Bypass in Next.js Framework', vendor: 'Vercel', product: 'Next.js', score: 9.1, severity: 'CRITICAL' },
  { cve: 'CVE-2025-20188', title: 'Remote File Upload Vulnerability in Cisco IOS Xe', vendor: 'Cisco', product: 'Cisco iOS Xe Software', score: 10, severity: 'CRITICAL' },
  { cve: 'CVE-2025-0282', title: 'Stack-Based Buffer Overflow in Ivanti Connect Secure', vendor: 'Ivanti', product: 'Connect Secure', score: 9, severity: 'CRITICAL' },
  { cve: 'CVE-2025-33073', title: 'Improper Access Control in Windows SMB', vendor: 'Microsoft', product: 'Windows 10 Version 1809', score: 8.8, severity: 'HIGH' },
  { cve: 'CVE-2025-31324', title: 'Unauthorized Metadata Upload Vulnerability in SAP', vendor: 'SAP', product: 'SAP Netweaver', score: 9.8, severity: 'CRITICAL' },
  { cve: 'CVE-2025-27840', title: 'Undocumented Hidden Commands in Espressif ESP32', vendor: 'Espressif', product: 'Esp32', score: 6.8, severity: 'MEDIUM' },
  { cve: 'CVE-2024-55591', title: 'Remote Attackers Can Gain Super-Admin Privilege', vendor: 'Fortinet', product: 'FortiOS', score: 9.8, severity: 'CRITICAL' },
  { cve: 'CVE-2025-24200', title: 'Authorization Issue in iPadOS and iOS by Apple', vendor: 'Apple', product: 'iPad OS', score: 6.1, severity: 'MEDIUM' },
  { cve: 'CVE-2025-5419', title: 'Out of Bounds Read and Write Vulnerability in Google Chrome', vendor: 'Google', product: 'Chrome', score: 8.8, severity: 'HIGH' },
  { cve: 'CVE-2025-0108', title: 'Authentication Bypass in Palo Alto Networks PAN', vendor: 'Palo Alto Networks', product: 'Cloud Ngfw', score: 5.9, severity: 'MEDIUM' },
];

const vendorData = [
  { vendor: 'WordPress', vulns: 4938, exploited: 542 },
  { vendor: 'Linux', vulns: 947, exploited: 3 },
  { vendor: 'Microsoft', vulns: 580, exploited: 40 },
  { vendor: 'Adobe', vulns: 453, exploited: 0 },
  { vendor: 'PHPGurukul', vulns: 409, exploited: 343 },
  { vendor: 'IBM', vulns: 353, exploited: 4 },
  { vendor: 'Apple', vulns: 345, exploited: 16 },
  { vendor: 'ToToLink', vulns: 213, exploited: 107 },
  { vendor: 'sourcecodester', vulns: 176, exploited: 129 },
  { vendor: 'Tenda', vulns: 172, exploited: 80 },
];

export default function VulnerabilityTrends() {
  const navigate = useNavigate();
  const mainRef = useRef();
  function handleBack() {
    if (mainRef.current) {
      mainRef.current.classList.remove('animate-slideFadeIn');
      mainRef.current.classList.add('animate-slideFadeOut');
      setTimeout(() => navigate('/dashboard'), 700);
    } else {
      navigate('/dashboard');
    }
  }
  return (
    <div className="min-h-screen bg-gray-100 dark:bg-[#1a1f29] flex flex-col dark:text-white">
      {/* Top bar */}
      <div className="flex items-center justify-between px-8 py-6 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 shadow dark:text-white">
        <div className="flex items-center gap-3">
          <img src={logo} alt="Swajyot Logo" className="h-8 w-8" />
          <span className="text-xl font-bold text-blue-700 tracking-wide">Swajyot AutoScanML</span>
        </div>
        <button
          onClick={handleBack}
          className="bg-blue-600 text-white px-4 py-2 rounded shadow hover:bg-blue-700 transition"
        >
          Back to Dashboard
        </button>
      </div>
      {/* Main content */}
      <main ref={mainRef} className="flex-1 p-6 max-w-6xl mx-auto w-full dark:text-white animate-slideFadeIn">
        {/* Headline stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow p-6 flex flex-col items-center dark:text-white">
            <span className="text-3xl font-bold text-blue-700 dark:text-white">{stats.total.toLocaleString()}</span>
            <span className="text-gray-500 dark:text-white mt-2 text-sm">Vulnerabilities published in 2025</span>
          </div>
          <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow p-6 flex flex-col items-center dark:text-white">
            <span className="text-3xl font-bold text-orange-500 dark:text-white">{stats.daily}</span>
            <span className="text-gray-500 dark:text-white mt-2 text-sm">Avg. new vulnerabilities each day!</span>
          </div>
          <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow p-6 flex flex-col items-center dark:text-white">
            <span className="text-3xl font-bold text-green-600 dark:text-white">{stats.yoy}%</span>
            <span className="text-gray-500 dark:text-white mt-2 text-sm">Increase in vulnerabilities YoY</span>
          </div>
          <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow p-6 flex flex-col items-center dark:text-white">
            <span className="text-3xl font-bold text-red-600 dark:text-white">CRITICAL</span>
            <span className="text-gray-500 dark:text-white mt-2 text-sm">{stats.critical} critical vulns</span>
          </div>
        </div>
        {/* Charts Row */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          {/* Pie Chart: Severity Breakdown */}
          <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow p-6 flex flex-col items-center dark:text-white">
            <h3 className="font-semibold mb-2 text-gray-900 dark:text-white">Severity Breakdown</h3>
            <ResponsiveContainer width="100%" height={220}>
              <PieChart>
                <Pie
                  data={[
                    { name: 'Critical', value: stats.critical },
                    { name: 'High', value: stats.high },
                    { name: 'Medium', value: stats.medium },
                    { name: 'Low', value: stats.low },
                    { name: 'Unrated', value: stats.unrated },
                  ]}
                  dataKey="value"
                  nameKey="name"
                  cx="50%"
                  cy="50%"
                  outerRadius={80}
                  label
                >
                  {COLORS.map((color, i) => (
                    <Cell key={i} fill={color} />
                  ))}
                </Pie>
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </div>
          {/* Bar Chart: Severity by Month */}
          <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow p-6 flex flex-col items-center dark:text-white">
            <h3 className="font-semibold mb-2 text-gray-900 dark:text-white">Severity by Month (2025)</h3>
            <ResponsiveContainer width="100%" height={220}>
              <BarChart data={severityByMonth}>
                <XAxis dataKey="month" stroke="#fff" className="dark:text-white" />
                <YAxis stroke="#fff" className="dark:text-white" />
                <Tooltip />
                <Legend />
                <Bar dataKey="Critical" fill="#ef4444" />
                <Bar dataKey="High" fill="#f97316" />
                <Bar dataKey="Medium" fill="#facc15" />
                <Bar dataKey="Low" fill="#60a5fa" />
              </BarChart>
            </ResponsiveContainer>
          </div>
          {/* Line Chart: Severity by Year */}
          <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow p-6 flex flex-col items-center dark:text-white">
            <h3 className="font-semibold mb-2 text-gray-900 dark:text-white">Severity by Year (2016-2025)</h3>
            <ResponsiveContainer width="100%" height={220}>
              <LineChart data={severityByYear}>
                <XAxis dataKey="year" stroke="#fff" className="dark:text-white" />
                <YAxis stroke="#fff" className="dark:text-white" />
                <Tooltip />
                <Legend />
                <Line type="monotone" dataKey="Critical" stroke="#ef4444" strokeWidth={2} />
                <Line type="monotone" dataKey="High" stroke="#f97316" strokeWidth={2} />
                <Line type="monotone" dataKey="Medium" stroke="#facc15" strokeWidth={2} />
                <Line type="monotone" dataKey="Low" stroke="#60a5fa" strokeWidth={2} />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>
        {/* Trending vulnerabilities */}
        <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow p-6 mb-8 dark:text-white">
          <h2 className="text-xl font-bold mb-4 text-gray-900 dark:text-white">Top 10 Trending Vulnerabilities for 2025</h2>
          <div className="overflow-x-auto">
            <table className="min-w-full text-sm dark:text-white">
              <thead>
                <tr className="bg-gray-100 dark:bg-gray-700 dark:text-white">
                  <th className="p-2 text-left dark:text-white">CVE</th>
                  <th className="p-2 text-left dark:text-white">Title</th>
                  <th className="p-2 text-left dark:text-white">Vendor</th>
                  <th className="p-2 text-left dark:text-white">Product</th>
                  <th className="p-2 text-left dark:text-white">Score</th>
                  <th className="p-2 text-left dark:text-white">Severity</th>
                </tr>
              </thead>
              <tbody>
                {trending.map((v, i) => (
                  <tr key={i} className="border-b hover:bg-blue-50 dark:hover:bg-gray-900 dark:text-white">
                    <td className="p-2 font-mono text-blue-700 dark:text-white">{v.cve}</td>
                    <td className="p-2 dark:text-white">{v.title}</td>
                    <td className="p-2 dark:text-white">{v.vendor}</td>
                    <td className="p-2 dark:text-white">{v.product}</td>
                    <td className="p-2 font-bold dark:text-white">{v.score}</td>
                    <td className={`p-2 font-bold ${v.severity === 'CRITICAL' ? 'text-red-600 dark:text-red-400' : v.severity === 'HIGH' ? 'text-orange-500 dark:text-orange-400' : v.severity === 'MEDIUM' ? 'text-yellow-600 dark:text-yellow-400' : 'text-gray-600 dark:text-white'}`}>{v.severity}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
        {/* Pareto Principle */}
        <div className="bg-blue-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow p-6 mb-8">
          <h2 className="text-lg font-bold mb-2 text-gray-900 dark:text-gray-100">Pareto Principle — The 80/20 Rule</h2>
          <p className="text-gray-700 dark:text-gray-300 mb-2">The Pareto principle states that for many outcomes, roughly 80% of consequences come from 20% of causes. In vulnerability management, only a small amount of CVEs introduce the majority of risk. Tracking CVEs that generate vibrant conversation gives us a tool to reliably identify the most important vulnerabilities.</p>
        </div>
        {/* Vendor breakdown chart */}
        <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow p-6 mb-8">
          <h2 className="text-xl font-bold mb-4 text-gray-900 dark:text-gray-100">Vulnerability Weighted Impact by Vendors</h2>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={vendorImpact} layout="vertical" margin={{ left: 40 }}>
              <XAxis type="number" stroke="#fff" className="dark:text-white" />
              <YAxis dataKey="vendor" type="category" width={120} stroke="#fff" className="dark:text-white" />
              <Tooltip />
              <Bar dataKey="Impact" fill="#2563eb" barSize={24} />
            </BarChart>
          </ResponsiveContainer>
        </div>
        {/* Vendor breakdown table */}
        <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow p-6 mb-8">
          <h2 className="text-xl font-bold mb-4 text-gray-900 dark:text-gray-100">Vendor Exploitation Table</h2>
          <div className="overflow-x-auto">
            <table className="min-w-full text-sm">
              <thead>
                <tr className="bg-gray-100 dark:bg-gray-700">
                  <th className="p-2 text-left">Vendor</th>
                  <th className="p-2 text-left">Vulnerabilities</th>
                  <th className="p-2 text-left">Exploited</th>
                </tr>
              </thead>
              <tbody>
                {vendorData.map((v, i) => (
                  <tr key={i} className="border-b hover:bg-blue-50 dark:hover:bg-gray-900">
                    <td className="p-2 font-bold">{v.vendor}</td>
                    <td className="p-2">{v.vulns}</td>
                    <td className="p-2">{v.exploited}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
        {/* Footer */}
        <footer className="text-center text-xs text-gray-400 py-4">
          Data inspired by <a href="https://securityvulnerability.io/stats" className="underline" target="_blank" rel="noopener noreferrer">securityvulnerability.io</a> | Copyright © 2025 Swajyot.
        </footer>
      </main>
    </div>
  );
} 